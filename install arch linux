# system should be UEFI enabled + GPT formated disk
# do it before installation 
    Disable Secure Boot
    Disable Launch CSM or Legacy Support
    Set Boot Mode to UEFI
    Enable USB Boot
    Set USB Disk as boot priority



# how to install arch linux
# connect to the wifi network
$ iwctl
	> device list (show device list)
	> station wlan0 scan (to scan wifi near me)
	> station wlan0 get-network (to show all network)
	> station wlan0 connect "ESSID" (you can directlly connect it by this)
		passphrase: *****
# exit and check $ping -c 4 google.com

===============================================================================

speed up parlell downloads
vim /etc/pacman.conf

===============================================================================


# update your pacman keyring (if you have any issue try billow process one by one)
pacman -Syyyy
pacman-key --init
pacman-key --populate
pacman-key --refresh-keys
pacman -S archlinux-keyring
pacman -S reflector
	  mirror='sudo reflector -f 30 -l 30 --number 10 --verbose --save /etc/pacman.d/mirrorlist'
	  mirrora='sudo reflector --latest 30 --number 10 --sort age --save /etc/pacman.d/mirrorlist'
	  mirrord='sudo reflector --latest 30 --number 10 --sort delay --save /etc/pacman.d/mirrorlist'
	  mirrors='sudo reflector --latest 30 --number 10 --sort score --save /etc/pacman.d/mirrorlist'
	  mirrorx='sudo reflector --age 6 --latest 20  --fastest 20 --threads 5 --sort rate --protocol https --save /etc/pacman.d/mirrorlist'
reboot your system if problem is not fixed




# check if you are booted into UEFI or not (optional) you can already check it on the main booted screen if it says "ARCH LINUX ISO UEFI"
ls /sys/firmware/efi/efivars


# setup keyboard layout (optional default is us)
loadkeys us





===============================================================================
# sync your clock
timedatectl set-ntp true









===============================================================================


# show all disk partition use billow command
lsblk || fdisk -l

# partition with cfdisk
cfdisk /dev/sda    (choose full disk to create partion don't use /dev/sda1 XXX wrong way)
	# create partition
	(/dev/sda1)				BOOT
	(/dev/sda2)				SWAP 
	(/dev/sda3)				LINUX(btrfs/ext4)
	# write and then quit

# check every partition 
lsblk

# format the partition
mkfs.fat -F32 /dev/sda1

mkswap /dev/sda2
swapon /dev/sda2

			mkfs.ext4 /dev/sda3 
			 -------or--------
			mkfs.btrfs /dev/sda3
			mount /dev/sda3 /mnt
					btrfs su cr /mnt/@
					btrfs su cr /mnt/@home
					btrfs su cr /mnt/@root
					btrfs su cr /mnt/@srv
					btrfs su cr /mnt/@log
					btrfs su cr /mnt/@cache
					btrfs su cr /mnt/@tmp
					btrfs su li /mnt     (maybe subvilume list)

			cd /                 (check it on arcolinux)
			umount /mnt           (check it on arcolinux)

					mount -o defaults,noatime,compress=zstd,commit=120,subvol=@ /dev/sda3 /mnt
					mkdir -p /mnt/{home,root,srv,var/log,var/cache,tmp}

					mount -o defaults,noatime,compress=zstd,commit=120,subvol=@home /dev/sda3 /mnt/home
					mount -o defaults,noatime,compress=zstd,commit=120,subvol=@root /dev/sda3 /mnt/root
					mount -o defaults,noatime,compress=zstd,commit=120,subvol=@srv /dev/sda3 /mnt/srv
					mount -o defaults,noatime,compress=zstd,commit=120,subvol=@log /dev/sda3 /mnt/var/log
					mount -o defaults,noatime,compress=zstd,commit=120,subvol=@cache /dev/sda3 /mnt/var/cache
					mount -o defaults,noatime,compress=zstd,commit=120,subvol=@tmp /dev/sda3 /mnt/tmp

			mkdir -p /mnt/boot/efi
			mount /dev/sda1 /mnt/boot/efi

# check every partition 
lsblk




# install the packages
pacstrap /mnt base base-devel linux linux-firmware vim btrfs-progs








=========================================================================================

# fstab (why this genrate)
genfstab -U /mnt >> /mnt/etc/fstab
cat /mnt/etc/fstab (to check)





=========================================================================================
arch-chroot /mnt





=========================================================================================

# setup your time zone (i don't know why i need this if timedatectl set-ntp true is already there )
# file is already in your system you just need to link it with other localtion

ln -sf /usr/share/zoneinfo/Asia/Kolkata /etc/localtime
					       <TAB> / <TAB>
---------------------or------------------------------
timedatectl list-timezones  (to check all the timezone)
timedatectl set-timezone Asia/Kalkata
							 /Calcutta (maybe)

# sync hw clock
hwclock --systohc












=========================================================================================
setup your locale (setup language for the system)
vim /etc/locale.conf                                            .......2
		LANG=en_US.UTF-8

vim /etc/locale.gen                                             .......1
		en_US.UTF-8 UTF-8
		en_US ISO-8859-1                     (not using it)
		(uncomment above from the group)
locale-gen    (must run to genrate)






# set your keyboard layout (optional default already is us)
echo KEYMAP=us >> /etc/vconsole.conf










=========================================================================================

# setup your HostName (computer name show in shell)
vim /etc/hostname
		tv (any name you want to give your this host machine just write it on the plane text no qouts or anything)

vim /etc/hosts
	127.0.0.1 localhost
	::1       localhost
	127.0.0.1 tv.localdomain	tv                 (this is host name)









=========================================================================================

set parlell download now you are on arch chroot


# i need to check what is needed or what not

pacman -S grub grub-btrfs efibootmgr networkmanager network-manager-applet os-prober
# not installing right now ==> linux-headers-lts linux-lts mtools dialogs dosfstools reflector




=========================================================================================

# set password for root user
passwd
==>:________
=======>:_________







=========================================================================================

# install grub bootloader

grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB (not writing this buy why needed not included but done sucessfully)
grub-mkconfig -o /boot/grub/grub.cfg










##### Only do if you need this (i don't need it but maybe you need this according to erik duobis)
##### mkdir /boot/efi/EFI/boot
##### cp /boot/efi/EFI/arch/grubx64.efi /boot/efi/EFI/boot/bootx64.efi
##### if having this error:- Reboot and Select proper Boot device or Insert Boot Media in selected Boot device and press a key








//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////


=========================================================================================

exit (form chroot)

umount -R /mnt               (unmount boot and root partition)
umount -a 					 (remove all partition everything)

reboot




# login as root with passowrd you creted
# check NetworkManager running ping -c 4 google.com
# update your system pacman -Syu
# enable parlell download vim /etc/pacman.conf 
# uncomment multilib in /etc/pacman.conf     [multilib] ###########################################################################
########################################     
# pacman -S bash-completion #complete command on tab






=========================================================================================

nano /etc/mkinitcpio.conf
MODULES=(btrfs)
BINARIES=(btrfs) (NOT USING)


mkinitcpio -p linux




//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////


















=========================================================================================

# add user in the sudo group (to use sudo command by user)

useradd -m -g users -G audio,video,network,wheel,storage,rfkill -s /bin/bash t
passwd t  (set password for the t user)
==>:________
=======>:_________

-m --> (create home directory for user)
t -->  (username)
-G --> (all groups)

#### now modify the sudo previlige for the wheel group by this your user can use the sudo command
EDITOR=vim visudo
	%wheel ALL=(ALL:ALL) ALL    (uncomment this line)(ALL)


:wq


# now reboot and login in your user account not root account





=========================================================================================
 
systemctl enable NetworkManager     (enable network)


//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
systemctl enable bluetooth			(enable bluetooth)(IDK)
systemctl enable org.cups.cupsd		(enable printer)(IDK)
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////















=========================================================================================

exit (form chroot)

umount -R /mnt               (unmount boot and root partition)
umount -a 					 (remove all partition everything)

reboot














=========================================================================================

# install the graphic driver
sudo pacman -S xorg-server xorg-apps xorg-xinit 
mesa xf86-video-intel intel-ucode

masa --> (for intel graphic)







# install display manager
sudo pacman -S lightdm
sudo pacman -S lightdm-gtk-greeter lightdm-gtk-greeter-settings
sudo systemctl enable lightdm.service


-----or---------------------------
sudo pacman -S sddm
sudo systemctl enable sddm.service







(here i am exiting)
run reflector after install
























































































source:-
https://www.nishantnadkarni.tech/posts/arch_installation/#step-5-set-time (btrfs)
https://www.arcolinuxd.com/5-the-actual-installation-of-arch-linux-phase-1-uefi/ (arcolinux guide)
https://github.com/Bugswriter/arch-linux-magic












extra cut
pacstrap    /mnt base linux linux-firmware linux-headers base-devel vim  [linux-lts ]
pacstrap    /mnt base linux linux-firmware intel-ucode btrfs-progs



FOR THE BLUETOOTH AND PRINTER YOU CAN USE ARCOLINXUD GITHUB

